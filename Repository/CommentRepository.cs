using System;
using WebApplication6.Models;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using WebApplication6.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http.HttpResults;
using WebApplication6.Repository;
using Microsoft.AspNetCore.Mvc;
using WebApplication6.Dtos.Comment;
using WebApplication6.data;

namespace WebApplication6.Repository
{
    public class CommentRepository : ICommentRepository
    {
        private readonly ApplicationDBContext _context;
        public CommentRepository(ApplicationDBContext context)
        {
            _context = context;
        }

        public async Task<Comment> CreateAsync(Comment commentModel)
        {
            await _context.Comments.AddAsync(commentModel);
            await _context.SaveChangesAsync();
            return commentModel;
        }

        public async Task<Comment> DeleteAsync(int id)
        {
            var commentModel = await _context.Comments.FirstOrDefaultAsync(x => x.Id == id);

            if (commentModel == null)
            {
                return null;
            }

            _context.Comments.Remove(commentModel);
            await _context.SaveChangesAsync();
            return commentModel;
        }

        public async Task<List<Comment>> GetAllAsync()
        {
            return await _context.Comments.Include(a => a.AppUser).ToListAsync();
        }

        public async Task<Comment?> GetByIdAsync(int id)
        {
            //var comment = await _commentRepo.GetByIdAsync(id);

            //if(comment == null)
            //{
            //    return NotFound();
            //}

            //return Ok(comment.ToCommentDto());
            return await _context.Comments.Include(a => a.AppUser).FirstOrDefaultAsync(c => c.Id == id);
        }

        public async Task<Comment?> UpdateAsync(int id, Comment commentModel)
        {
            var exitingComment = await _context.Comments.FindAsync(id);
            if (exitingComment == null)
            {
                return null;
            }

            exitingComment.Title = commentModel.Title;
            exitingComment.Content = commentModel.Content;

            await _context.SaveChangesAsync();

            return exitingComment;
        }
    }
}

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































